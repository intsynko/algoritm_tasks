"""
Лента фотографий
Полное решение
Для разработки модуля отображения фотографий в виде вертикальной ленты решено использовать следующий алгоритм:

выбрать k фотографий из имеющейся коллекции;
отмасштабировать все фотографии до ширины w;
отображать полученные фотографии в вертикальном формате одна над одной без отступов.
Определите, какую наибольшую и наименьшую высоту может иметь полученная лента из k фотографий.

Будем считать, что при масштабировании фотографии размера w' x h'
до ширины w, новая высота вычисляется по следующей формуле: h=|h'*w/w'|


Формат ввода
В первой строке записано одно целое число w
Во второй строке записаны два числа n и k
В каждой из следующих n строк записана строка w(i)' h(i)', 
(640<= w(i)' h(i)'<=4096). Размеры фотографий записаны без пробелов.

Формат вывода
Выведите в первой строке минимальную высоту ленты из k фотографий.

Во второй строке выведите максимальную высоту ленты из k фотографий.

Пример 1
Ввод
2000
5 3
1000x1000
1000x1500
640x930
640x1500
3000x1000
Вывод
5574
10595

Пример 2
Ввод
1000
5 5
1404x1386
1132x1110
1061x1801
1022x1519
1529x1003
Вывод
5810
5810

Пример 3
Ввод
4096
2 1
640x4096
4096x640
Вывод
640
26215
Примечание
Функция ''потолок'' |x| — это наименьшее целое, большее или равное x: |x| = min{n∈{Z}} |x|=min{n∈Z∣n⩾x}.

Ограничение памяти
256.0 Мб
Ограничение времени
1 с
Ввод
стандартный ввод или input.txt
Вывод
стандартный вывод или output.txt

"""

import math

width_new = int(input())

n, k = [int(i) for i in input().split(" ")]

heights = dict()

for _ in range(n):
    w, h = [int(i) for i in input().split("x")]
    if w <= 0:
        continue
    h = math.ceil(h * width_new / w)
    if heights.get(h):
        heights[h] += 1
    else:
        heights[h] = 1

heights = sorted(heights.items())

min_ = 0
min_count = 0
for widht, amount in heights:
    to_get = min(amount, k - min_count)
    min_count += to_get
    min_ += to_get * widht
    if min_count == k:
        break

max_ = 0
max_count = 0
for widht, amount in reversed(heights):
    to_get = min(amount, k - max_count)
    max_count += to_get
    max_ += to_get * widht
    if max_count == k:
        break

print(min_)
print(max_)

